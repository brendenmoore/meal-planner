// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  // NOTE: When using mysql or sqlserver, uncomment the @db.Text annotations in model Account below
  // Further reading:
  // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
  // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model Recipe {
  id            Int             @id @default(autoincrement())
  userId        String
  name          String
  description   String?
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
  user          User            @relation(fields: [userId], references: [id])
  CalendarEntry CalendarEntry[]
  TemplateEntry TemplateEntry[]
}

model CalendarEntry {
  id       Int      @id @default(autoincrement())
  userId   String
  recipeId Int
  date     DateTime @db.Date
  order    Int
  user     User     @relation(fields: [userId], references: [id])
  recipe   Recipe   @relation(fields: [recipeId], references: [id])

  @@index([userId, date])
}

model Template {
  id                Int             @id @default(autoincrement())
  userId            String
  name              String
  lastAppliedOffset Int             @default(-1)
  lastAppliedDate   DateTime?       @db.Date
  user              User            @relation(fields: [userId], references: [id])
  entries           TemplateEntry[]
  defaultForUsers   User[]          @relation("DefaultTemplate")
}

model TemplateEntry {
  id         Int      @id @default(autoincrement())
  userId     String
  templateId Int
  recipeId   Int
  dayOffset  Int
  order      Int
  template   Template @relation(fields: [templateId], references: [id])
  recipe     Recipe   @relation(fields: [recipeId], references: [id])
  user       User     @relation(fields: [userId], references: [id])

  @@index([templateId, dayOffset])
}

// Necessary for Next auth
model Account {
  id                       String  @id @default(cuid())
  userId                   String
  type                     String
  provider                 String
  providerAccountId        String
  refresh_token            String? // @db.Text
  access_token             String? // @db.Text
  expires_at               Int?
  token_type               String?
  scope                    String?
  id_token                 String? // @db.Text
  session_state            String?
  user                     User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  refresh_token_expires_in Int?

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id                String          @id @default(cuid())
  name              String?
  email             String?         @unique
  emailVerified     DateTime?
  image             String?
  accounts          Account[]
  sessions          Session[]
  recipes           Recipe[]
  calendarEntries   CalendarEntry[]
  templates         Template[]
  defaultTemplate   Template?       @relation("DefaultTemplate", fields: [defaultTemplateId], references: [id])
  defaultTemplateId Int?
  TemplateEntry     TemplateEntry[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
